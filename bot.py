import asyncio
import requests
from pyrogram import Client, filters, idle
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, Message
from pyrogram.errors import UserNotParticipant
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import PhoneNumberInvalidError, PhoneCodeInvalidError, PhoneCodeExpiredError, SessionPasswordNeededError, PasswordHashInvalidError

api_hash = ''
api_id = 
token = ''
dev_id = 
channel = ''

app = Client(name='saiffsom', api_id=api_id, api_hash=api_hash, bot_token=token, in_memory=True)

@app.on_message(filters.command('start') & filters.private)
async def start(client: Client, msg: Message):
    user_check = requests.get(f'https://api.telegram.org/bot{token}/getChatMember?chat_id=@{channel}&user_id={msg.from_user.id}').text
    if 'left' in user_check or 'Bad Request: user not found' in user_check:
        await msg.reply_text(
            f'**Please join [this channel](t.me/{channel}) first to use the bot**',
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('Join Channel', url=f'https://t.me/{channel}')]])
        )
    else:
        await app.send_message(dev_id, f'{msg.from_user.mention} joined the bot.')
        await app.send_message(
            chat_id=msg.chat.id,
            text=f'Hello {msg.from_user.mention}!\nThis bot generates Pyrogram and Telethon session strings.\n\n- Owner: @gitv11',
            reply_to_message_id=msg.id,
            disable_web_page_preview=True,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton('Pyrogram'), KeyboardButton('Telethon')], [KeyboardButton('info')]], resize_keyboard=True)
        )

@app.on_message(filters.text & filters.private)
async def generator_and_about(app, msg):
    if msg.text == 'info':
        info_text = f'Programming Language: Python\nPyrogram: {Client.__version__}\nTelethon: {TelegramClient.__version__}\n\nChannel: [@gitv11](t.me/@gitv11)'
        await msg.reply(info_text, quote=True)

    elif msg.text == 'Pyrogram':
        rep = await msg.reply('Processing...', reply_markup=ReplyKeyboardRemove(), quote=True)
        pyro_client = Client(f'pyro{msg.from_user.id}', api_id, api_hash, device_model='Elmasry', in_memory=True)
        await pyro_client.connect()
        await rep.delete()
        
        phone_msg = await app.ask(msg.chat.id, 'Please enter your phone number (e.g., +number):', reply_to_message_id=msg.id, filters=filters.text)
        phone = phone_msg.text

        try:
            code_info = await pyro_client.send_code(phone)
        except PhoneNumberInvalidError:
            return await phone_msg.reply('Invalid phone number.\n/start', quote=True)
        except Exception:
            return await phone_msg.reply('An error occurred! Please try again later.\n/start', quote=True)

        code_hash = code_info.phone_code_hash
        code_msg = await app.ask(msg.chat.id, 'Now send the code you received in this format (e.g., 12345):', filters=filters.text)
        code = code_msg.text

        try:
            await pyro_client.sign_in(phone, code_hash, code)
        except SessionPasswordNeededError:
            password_msg = await app.ask(msg.chat.id, 'Please enter your 2FA password:', filters=filters.text)
            password = password_msg.text
            try:
                await pyro_client.check_password(password)
            except PasswordHashInvalidError:
                return await password_msg.reply('Invalid password.\n/start', quote=True)

        except (PhoneCodeInvalidError, PhoneCodeExpiredError):
            return await code_msg.reply('Invalid phone code.\n/start', quote=True)

        rep = await msg.reply('Processing...', quote=True)
        user_info = await pyro_client.get_me()
        session_string = await pyro_client.export_session_string()
        
        await rep.delete()
        await pyro_client.send_message('me', f'Successfully generated Pyrogram session string:\n\n`{session_string}`\nChannel: [@gitv11](t.me/@gitv11)\nGenerated by: @gitv11')
        await pyro_client.disconnect()
        await app.send_message(msg.chat.id, f'Successfully logged in!\nFirst Name: {user_info.first_name}\nID: {user_info.id}\nPhone: {phone}\nSession saved in your saved messages.\n/start')

    elif msg.text == 'Telethon':
        rep = await msg.reply('Processing...', reply_markup=ReplyKeyboardRemove(), quote=True)
        tele_client = TelegramClient(StringSession(), api_id, api_hash)
        await tele_client.connect()
        await rep.delete()
        
        phone_msg = await app.ask(msg.chat.id, 'Please enter your phone number (e.g., +number):', reply_to_message_id=msg.id, filters=filters.text)
        phone = phone_msg.text

        try:
            await tele_client.send_code_request(phone)
        except PhoneNumberInvalidError:
            return await phone_msg.reply('Invalid phone number.\n/start', quote=True)
        except Exception:
            return await phone_msg.reply('An error occurred! Please try again later.\n/start', quote=True)

        code_msg = await app.ask(msg.chat.id, 'Now send the code you received (e.g., 12345):', filters=filters.text)
        code = code_msg.text.replace(' ', '')

        try:
            await tele_client.sign_in(phone, code)
        except SessionPasswordNeededError:
            password_msg = await app.ask(msg.chat.id, 'Please enter your 2FA password:', filters=filters.text)
            password = password_msg.text
            try:
                await tele_client.sign_in(password=password)
            except PasswordHashInvalidError:
                return await password_msg.reply('Invalid password.\n/start', quote=True)

        except (PhoneCodeExpiredError, PhoneCodeInvalidError):
            return await code_msg.reply('Invalid phone code.\n/start', quote=True)

        rep = await msg.reply('Processing...', quote=True)
        user_info = await tele_client.get_me()
        session_string = tele_client.session.save()
        
        await rep.delete()
        await tele_client.send_message('me', f'Successfully generated Telethon session string:\n\n`{session_string}`\nChannel: [@saiffsom](t.me/saiffsom)\nGenerated by: @saiffsom')
        await tele_client.disconnect()
        await app.send_message(msg.chat.id, f'Successfully logged in!\nFirst Name: {user_info.first_name}\nID: {user_info.id}\nPhone: {phone}\nSession saved in your saved messages.\n/start')

app.run()
